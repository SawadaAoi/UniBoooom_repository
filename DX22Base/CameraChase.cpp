/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	追跡カメラ実装
	------------------------------------
	CameraChase.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/11/04 制作 takagi
	・2023/11/06 コーディング規約適用・追跡対象登録機構作成 takagi
	・2023/11/07 GetViewMatrix()関数にconst修飾子付与・コメント修正 takagi
	・2023/11/08 TPos修正 takagi
	・2023/11/09 微調整 takagi
	・2023/11/10 パラメタ修正 takagi

========================================== */

// =============== インクルード ===================
#include "CameraChase.h"	//自身のヘッダ
#include "Input.h"			//入力受付

/* ========================================
	コンストラクタ関数
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CCameraChase::CCameraChase(const TPos3d<float>* pPos)
	:m_pTarget(pPos)	//追跡対象(追跡のみを行い値を変更できないようconst修飾子にしている)
{
}

/* ========================================
	デストラクタ関数
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CCameraChase::~CCameraChase()
{
}

/* ========================================
	更新関数
	-------------------------------------
	内容：更新処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CCameraChase::Update()
{
}

/* ========================================
	ビュー行列取得関数
	-------------------------------------
	内容：カメラのビュー行列を提供
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：作成した行列
=========================================== */
DirectX::XMFLOAT4X4 CCameraChase::GetViewMatrix() const
{
	if (!m_pTarget)
	{
		return DirectX::XMFLOAT4X4();
	}

	// =============== 変数宣言 ===================
	DirectX::XMFLOAT4X4 mat;	//行列格納用

	// =============== ビュー行列の計算 ===================
	DirectX::XMStoreFloat4x4(&mat, DirectX::XMMatrixTranspose(
		DirectX::XMMatrixLookAtLH(
			DirectX::XMVectorSet(m_pTarget->x, m_pTarget->y + m_fRadius * sinf(m_fAngle), m_pTarget->z - m_fRadius * cosf(m_fAngle), 0.0f),	//カメラ位置
			DirectX::XMVectorSet(m_pTarget->x, m_pTarget->y, m_pTarget->z, 0.0f),										//注視点
			DirectX::XMVectorSet(m_fUp.x, m_fUp.y, m_fUp.z, 0.0f)														//アップベクトル
	)));	//ビュー変換

	// =============== 提供 ===================
	return mat;	//行列提供
}