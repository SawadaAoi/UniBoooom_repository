/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	追跡カメラ実装
	------------------------------------
	CameraChase.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/11/04 制作 takagi
	・2023/11/06 コーディング規約適用・追跡対象登録機構作成

========================================== */



// =============== インクルード ===================
#include "CameraChase.h"	//自身のヘッダ
#include "Input.h"			//入力受付

// =============== 定数定義 ===================
const float SPEED = 0.1f;	//カメラの速度



/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CCameraChase::CCameraChase(const TPos<float>* pPos)
	:m_pTarget(pPos)	//追跡対象(追跡のみを行い値を変更できないようconst修飾子にしている)
{
}

/* ========================================
	デストラクタ
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CCameraChase::~CCameraChase()
{
}

/* ========================================
	更新関数
	-------------------------------------
	内容：更新処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CCameraChase::Update()
{
}

/* ========================================
	ビュー行列取得関数
	-------------------------------------
	内容：カメラのビュー行列を提供
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
DirectX::XMFLOAT4X4 CCameraChase::GetViewMatrix()
{
	DirectX::XMFLOAT4X4 mat;
	//	ビュー行列の計算
	DirectX::XMMATRIX view = DirectX::XMMatrixLookAtLH(DirectX::XMVectorSet(m_pTarget->x, m_pTarget->y, m_pTarget->z - m_fRadius * cosf(m_fAngle), 0.0f),
		DirectX::XMVectorSet(m_pTarget->x, m_pTarget->y, m_pTarget->z, 0.0f), DirectX::XMVectorSet(m_fUp.x, m_fUp.y, m_fUp.z, 0.0f));	//ビュー行列の設定
	view = DirectX::XMMatrixTranspose(view);	//転置行列に変換
	DirectX::XMStoreFloat4x4(&mat, view);//mat = XMMATRIX型→XMFLOAT4X4型
	return mat;
}