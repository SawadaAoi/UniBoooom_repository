/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	HPテクスチャ表示用cpp
	------------------------------------
	HpUI.cpp
	------------------------------------
	作成者	仁枝潤哉

	変更履歴
	・2023/11/16 新規作成 仁枝潤哉

========================================== */

// =============== インクルード ===================
#include "HpUI.h"
#include "DirectXTex/TextureLoad.h"
#include "Sprite.h"

/* ========================================
	コンストラクタ関数
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数：なし
	-------------------------------------
	戻値：なし
=========================================== */
CHpUI::CHpUI()
{
	m_pTexture = new Texture();
	if (FAILED(m_pTexture->Create("Assets/Texture/Star.png")))
	{
		MessageBox(NULL, "ItemUI Star.png", "Error", MB_OK);
	}
}

/* ========================================
	デストラクタ関数
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数：なし
	-------------------------------------
	戻値：なし
=========================================== */
CHpUI::~CHpUI()
{
	if (m_pTexture)
	{
		delete m_pTexture;
		m_pTexture = nullptr;
	}
}

/* ========================================
	更新関数
	-------------------------------------
	内容：描画の更新処理
	-------------------------------------
	引数：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CHpUI::Update()
{
	m_bDisp ^= 1;
}

/* ========================================
	描画関数
	-------------------------------------
	内容：テクスチャの描画処理
	-------------------------------------
	引数1：表示位置のX座標
	-------------------------------------
	引数2：表示位置のY座標
	-------------------------------------
	引数3：表示するテクスチャの縦幅
	-------------------------------------
	引数4：表示するテクスチャの横幅
	-------------------------------------
	戻値：なし
=========================================== */
void CHpUI::Draw(float posX, float posY, float h, float w)
{
	DirectX::XMFLOAT4X4 mat[3];

	// ワールド行列はXとYのみを考慮して作成
	DirectX::XMMATRIX world = DirectX::XMMatrixTranslation(posX, posY, 0.0f);	// ワールド行列（必要に応じて変数を増やしたり、複数処理を記述したりする）
	DirectX::XMStoreFloat4x4(&mat[0], DirectX::XMMatrixTranspose(world));

	// ビュー行列は2Dだとカメラの位置があまり関係ないので、単位行列を設定する
	DirectX::XMStoreFloat4x4(&mat[1], DirectX::XMMatrixIdentity());

	// プロジェクション行列には2Dとして表示するための行列を設定する
	// この行列で2Dのスクリーンの大きさが決まる
	DirectX::XMMATRIX proj = DirectX::XMMatrixOrthographicOffCenterLH(0.0f, 1280.0f, 720.0f, 0.0f, 0.1f, 10.0f);	// 平衡投影行列を設定
	DirectX::XMStoreFloat4x4(&mat[2], DirectX::XMMatrixTranspose(proj));

	// スプライトの設定
	Sprite::SetWorld(mat[0]);
	Sprite::SetView(mat[1]);
	Sprite::SetProjection(mat[2]);
	Sprite::SetSize(DirectX::XMFLOAT2(h, -w));
	Sprite::SetTexture(m_pTexture);
	if (m_bDisp) { Sprite::Draw(); }
}
