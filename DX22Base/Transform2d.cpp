/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	2Dのシェーダーに渡す定数バッファを実装
	------------------------------------
	Transform2d.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/11/08 ファイル制作 takagi
	・2023/11/09 中身制作 takagi

========================================== */

// =============== インクルード ===================
#include "Transform2d.h"	//自身のヘッダ

// =============== 定数定義 ===================
const TPos2d<float> INIT_POS(0.0f, 0.0f);		//初期位置
const TDiType<float> INIT_SCALE(0.0f, 0.0f);	//初期拡縮
const float INIT_RAD(0.0f);						//初期回転

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagTransform2d::tagTransform2d()
	:tagTransform2d(INIT_POS, INIT_SCALE, INIT_RAD)
{
}

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：const TPos2d<float> & fPos：位置データ
	引数2：const TDiType<float> & fScale：拡縮倍率
	引数3：const float & fRadian)：角
	-------------------------------------
	戻値：なし
=========================================== */
tagTransform2d::tagTransform2d(const TPos2d<float> & fPos, const TDiType<float> & fScale, const float & fRadian)
	:fPos(fPos)			//位置
	, fScale(fScale)		//拡縮率
	, fRadian(fRadian)	//角
{
}

/* ========================================
	コピーコンストラクタ
	-------------------------------------
	内容：コピー時に行う処理
	-------------------------------------
	引数1：const tagTransform2d & Obj：複製するデータ元の参照
	-------------------------------------
	戻値：なし
=========================================== */
tagTransform2d::tagTransform2d(const tagTransform2d & Obj)
{
	// =============== 複製 ===================
	this->fPos = Obj.fPos;			//位置コピー
	this->fScale = Obj.fScale;		//拡縮コピー
	this->fRadian = Obj.fRadian;	//回転角コピー
}

/* ========================================
	デストラクタ
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagTransform2d::~tagTransform2d()
{
}

/* ========================================
	代入演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに代入処理を行う
	------------------------------------ -
	引数1：const tagTransform2d & Obj：代入する値の参照
	------------------------------------ -
	戻値：代入が行われた自分自身
=========================================== */
tagTransform2d& tagTransform2d::operator=(const tagTransform2d & Obj)
{
	// =============== 複製 ===================
	this->fPos = Obj.fPos;			//位置コピー
	this->fScale = Obj.fScale;		//拡縮コピー
	this->fRadian = Obj.fRadian;	//回転角コピー

	// =============== 提供 ===================
	return	*this;	//自身の参照
}

/* ========================================
	加算演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに加算処理を行う
	------------------------------------ -
	引数1：const tagTransform2d & Obj：加算する値の参照
	------------------------------------ -
	戻値：自身と引数の加算結果
=========================================== */
tagTransform2d tagTransform2d::operator+(const tagTransform2d & Obj) const
{
	// =============== 提供 ===================
	return { this->fPos + Obj.fPos, this->fScale + Obj.fScale, this->fRadian + Obj.fRadian };	//加算結果
}

/* ========================================
	加算代入演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに加算処理を行ったものを代入する
	------------------------------------ -
	引数1：const tagTransform2d & Obj：加算する値の参照
	------------------------------------ -
	戻値：引数が加算された自分自身
=========================================== */
tagTransform2d & tagTransform2d::operator+=(const tagTransform2d & Obj)
{
	// =============== 提供 ===================
	return (*this = *this + Obj);	//実装済演算子を使用して処理を行い、自身の参照を返す
}

/* ========================================
	減算演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに減算処理を行う
	------------------------------------ -
	引数1：const tagTransform2d & Obj：減算する値の参照
	------------------------------------ -
	戻値：自身 - 引数の結果
=========================================== */
tagTransform2d tagTransform2d::operator-(const tagTransform2d & Obj) const
{
	// =============== 提供 ===================
	return { this->fPos - Obj.fPos, this->fScale - Obj.fScale, this->fRadian - Obj.fRadian };	//減算結果
}

/* ========================================
	減算代入演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに減算処理を行ったものを代入する
	------------------------------------ -
	引数1：const tagTransform2d & Obj：減算する値の参照
	------------------------------------ -
	戻値：引数が減算された自分自身
=========================================== */
tagTransform2d & tagTransform2d::operator-=(const tagTransform2d & Obj)
{
	// =============== 提供 ===================
	return (*this = *this - Obj);	//実装済演算子を使用して処理を行い、自身の参照を返す
}

/* ========================================
	乗算演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに乗算処理を行う
	------------------------------------ -
	引数1：const tagTransform2d & Obj：乗算する値の参照
	------------------------------------ -
	戻値：自身と引数の乗算結果
=========================================== */
tagTransform2d tagTransform2d::operator*(const tagTransform2d & Obj) const
{
	// =============== 提供 ===================
	return { this->fPos * Obj.fPos, this->fScale * Obj.fScale, this->fRadian * Obj.fRadian };	//乗算結果
}

/* ========================================
	乗算代入演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに乗算処理を行ったものを代入する
	------------------------------------ -
	引数1：const tagTransform2d & Obj：乗算する値の参照
	------------------------------------ -
	戻値：引数が乗算された自分自身
=========================================== */
tagTransform2d & tagTransform2d::operator*=(const tagTransform2d & Obj)
{
	// =============== 提供 ===================
	return (*this = *this * Obj);	//実装済演算子を使用して処理を行い、自身の参照を返す
}

/* ========================================
	除算演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに除算処理を行う
	------------------------------------ -
	引数1：const tagTransform2d & Obj：除算する値の参照
	------------------------------------ -
	戻値：自身 / 引数の結果
=========================================== */
tagTransform2d tagTransform2d::operator/(const tagTransform2d & Obj) const
{
	// =============== 提供 ===================
	return { this->fPos / Obj.fPos, this->fScale / Obj.fScale, this->fRadian / Obj.fRadian };	//除算結果
}

/* ========================================
	除算代入演算子
	------------------------------------ -
	内容：独立した２つのメンバー変数に対してそれぞれに除算処理を行ったものを代入する
	------------------------------------ -
	引数1：const tagTransform2d & Obj：除算する値の参照
	------------------------------------ -
	戻値：引数が除算された自分自身
=========================================== */
tagTransform2d & tagTransform2d::operator/=(const tagTransform2d & Obj)
{
	// =============== 提供 ===================
	return (*this = *this / Obj);	//実装済演算子を使用して処理を行い、自身の参照を返す
}