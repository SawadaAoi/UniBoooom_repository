/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	ボススライム.cpp
	------------------------------------
	Slime_Boss.cpp
	------------------------------------
	作成者	鈴村朋也

	変更履歴
	・2023/11/17 クラス作成 Suzumura
	・2023/11/23 Damage,IsDead関数を追加 Suzumura
	・2023/11/28 影の描画を追加 nieda

========================================== */

// =============== インクルード ===================
#include "Slime_BossBase.h"

/* ========================================
	コンストラクタ関数
	-------------------------------------
	内容：コンストラクタ
	-------------------------------------
	引数1：無し
	-------------------------------------
	戻値：無し
=========================================== */
CSlime_BossBase::CSlime_BossBase()
	: m_nHp(0)
	, m_nMaxHp(0)
	, m_bDead(false)
	, m_nInvFrame(0)
	, m_bDrawFlg(true)
	, m_bFlash(false)
{
	
}


/* ========================================
	デストラクタ関数
	-------------------------------------
	内容：デストラクタ
	-------------------------------------
	引数1：無し
	-------------------------------------
	戻値：無し
=========================================== */
CSlime_BossBase::~CSlime_BossBase()
{
}

/* ========================================
	更新処理関数
	-------------------------------------
	内容：更新処理
	-------------------------------------
	引数1：プレイヤー座標(TPos3d)
	-------------------------------------
	戻値：無し
=========================================== */
void CSlime_BossBase::Update(TPos3d<float> playerPos)
{

	if (!m_bHitMove)	//敵が通常の移動状態の時
	{
		NormalMove(playerPos);
	}
	else
	{
		//敵の吹き飛び移動
		HitMove();
	}

	// -- 座標更新
	m_Transform.fPos.x += m_move.x;
	m_Transform.fPos.z += m_move.z;

	// ダメージ発生中じゃないなら点滅処理を行わない
	if (m_bFlash == false) return;
	// 点滅処理
	m_nInvFrame++;						//毎フレームでカウントを追加
	if (0 == m_nInvFrame % BOSS_DAMAGE_FLASH_FRAME)
	{
		// 描画するかしない切り替え
		if (m_bDrawFlg)
		{
			m_bDrawFlg = false;	// true→false
		}
		else
		{
			m_bDrawFlg = true;	// false→true
		}

	}
	// 総点滅時間を過ぎたら終了
	if (m_nInvFrame >= BOSS_DAMAGE_FLASH_TOTAL_FRAME)
	{
		m_bFlash = false;
		m_nInvFrame = 0;
		m_bDrawFlg = true;
	}
}

/* ========================================
	描画処理関数
	-------------------------------------
	内容：描画処理
	-------------------------------------
	引数1：カメラ
	-------------------------------------
	戻値：無し
=========================================== */
void CSlime_BossBase::Draw(const CCamera* pCamera)
{
	// DrawFlgがtrueなら描画処理を行う
	if (m_bDrawFlg == false) return;

	DirectX::XMFLOAT4X4 mat[3];

	mat[0] = m_Transform.GetWorldMatrixSRT();
	mat[1] = pCamera->GetViewMatrix();
	mat[2] = pCamera->GetProjectionMatrix();

	//-- 行列をシェーダーへ設定
	m_pVS->WriteBuffer(0, mat);

	//-- モデル表示
	if (m_pModel) {
		m_pModel->Draw();
	}

	m_pShadow->Draw(m_Transform, m_fScaleShadow, pCamera);	// 影の描画

}


/* ========================================
	ワープ関数
	-------------------------------------
	内容：ボスが離れすぎたら近くにワープ
	-------------------------------------
	引数1：プレイヤー座標(TPos3d)
	-------------------------------------
	戻値：なし
=========================================== */
void CSlime_BossBase::Warp(TPos3d<float> playerPos)
{

}

/* ========================================
	ダメージ関数
	-------------------------------------
	内容：ボスにダメージを与える関数
	-------------------------------------
	引数1：ダメージ量
	-------------------------------------
	戻値：なし
=========================================== */
void CSlime_BossBase::Damage(int num)
{
	m_nHp -= num;		// HP減少
	m_bFlash = true;	// 点滅ON

	if (m_nHp <= 0) m_bDead = true;	// HPが０以下なら死亡
}

/* ========================================
	生死確認関数
	-------------------------------------
	内容：ボスが死んでいるかどうかを返す
	-------------------------------------
	引数1：無し
	-------------------------------------
	戻値：死んでいるかどうか(bool)
=========================================== */
bool CSlime_BossBase::IsDead()
{
	return m_bDead;
}



