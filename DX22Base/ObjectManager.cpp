/* ========================================
	HEW/UniBoooom!!
	---------------------------------------
	シーン用抽象クラス実装
	---------------------------------------
	ObjectManager.cpp
	---------------------------------------
	作成者	takagi

	変更履歴
	・2024/01/21 制作 takagi
	・2024/01/23 制作進行 takagi

========================================== */

// =============== インクルード ===================
#include "ObjectManager.h"		//自身のヘッダ
#include "Delete.h"				//削除マクロ
#include <vector>				//配列コンテナ
#include <algorithm>			//ソート用

/* ========================================
	コンストラクタ
	----------------------------------------
	内容：生成時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CObjectManager::CObjectManager()
	:m_pCamera(nullptr)	//カメラ
{
}

/* ========================================
	デストラクタ
	----------------------------------------
	内容：破棄時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CObjectManager::~CObjectManager()
{
}

/* ========================================
	更新関数
	----------------------------------------
	内容：更新処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
void CObjectManager::Update()
{
	// =============== 更新 ===================
	for (auto Iterator = m_pObject.begin(); Iterator != m_pObject.end(); Iterator++)
	{
		if (*Iterator)	//ヌルチェック
		{
			(*Iterator)->Update();	//管理物更新
		};
	}
}

/* ========================================
	カメラセッタ関数
	-------------------------------------
	内容：カメラ登録
	-------------------------------------
	引数1：const CCamera* pCamera：自身を映すカメラ
	-------------------------------------
	戻値：なし
=========================================== */
void CObjectManager::SetCamera(const CCamera* pCamera)
{
	// =============== カメラ登録 ===================
	if (pCamera)	//ヌルチェック
	{
		m_pCamera = pCamera;	//新規カメラ登録
		for (auto Iterator = m_pObject.begin(); Iterator != m_pObject.end(); Iterator++)
		{
			if (*Iterator)	//ヌルチェック
			{
				(*Iterator)->SetCamera(pCamera);	//使用カメラ更新
			};
		}
	}
}

/* ========================================
	オブジェクト取得関数
	-------------------------------------
	内容：引数で受け取った格納先に管理しているオブジェクトを全て格納する
	-------------------------------------
	引数1：std::vector<const CObject*>& Object：格納先
	-------------------------------------
	戻値：無し
=========================================== */
void CObjectManager::GetObjects(std::vector<const CObject*>& Object)
{
	// =============== 提供 ===================
	for (int nIdx = 0; nIdx < static_cast<int>(m_pObject.size()); nIdx++)	//コンテナ周回
	{
		Object.emplace_back(m_pObject.at(nIdx));	//オブジェクトのポインタ格納
	}
}