/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	乱数生成定義
	------------------------------------
	Random.h
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/11/28 制作 takagi

========================================== */
/* ========================================
	存在意義
	------------------------------------
	基本#include <random>の機能をそのまま使うが、
	不確定な(=シード値によって確定しない)乱数生成器であるstd::random_deviceの()演算子が乱数を生成するとき処理が重くなるので、
	それを使用して作る疑似乱数生成器のstd::mt19937を静的に確保しておくために存在。
========================================== */
//MIGHT_DO:シードシーケンスの適用

#ifndef ___RANDOM_H___	//Random.hインクルードガード
#define ___RANDOM_H___

// =============== インクルード ===================
#include <random>	//乱数生成
#include <vector>	//コンテナ配列

// =============== テンプレートクラス定義 ===================
template<class Random>
class CRandom
{
public:
	~CRandom();
	void Update();
protected:
	CRandom();
	static const std::mt19937 ms_Engine;		//シード値にしたがって作成される乱数
private:
	//static const std::random_device ms_Seed;	//疑似乱数作成シード用の非決定的乱数
	static int ms_nCntRandom;			//乱数が使用されている数

	virtual Random Get() = 0;			//乱数の空消費
};	//テンプレートクラス：乱数生成

#endif // !___RANDOM_H___

/* ========================================
	デストラクタ関数
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
template<class Random>	//テンプレート関数実装
inline CRandom<Random>::~CRandom()
{
	// =============== カウンタ ===================
	ms_nCntRandom--;	//自身の数カウント
}

/* ========================================
	更新関数
	-------------------------------------
	内容：更新処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
template<class Random>	//テンプレート関数実装
void CRandom<Random>::Update()
{
	// =============== 更新 ===================
	Get();	//乱数空消費
}

/* ========================================
	コンストラクタ関数
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：const Random & Min：乱数の最小値(範囲内)
	引数2：const Random & Max：乱数の天井(範囲外)
	-------------------------------------
	戻値：なし
=========================================== */
template<class Random>	//テンプレート関数実装
CRandom<Random>::CRandom()
{
	// =============== インクルード ===================
	if (0 == ms_nCntRandom)	//自身がいないとき
	{
		std::random_device ms_Seed;	//シード値ランダム生成器
		ms_Engine{ ms_Seed() };		//乱数生成器
	}

	// =============== カウンタ ===================
	ms_nCntRandom++;	//自身の数カウント
}

CRandom(double dAverage, double dSd);						//正規分散
CRandom(vector<double> dTable, vector<Random> aElements)	//確率テーブル