/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	三次元位置座標を管理するテンプレートクラスを定義
	------------------------------------
	Pos3d.h
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/11/07 3dからコピペ・2d用に変更 takagi

========================================== */

#ifndef ___POS_2D_H___
#define ___POS_2D_H___

// =============== インクルード ===================
#include "DiType.h"	//３つの同じ型を持つ型

// =============== テンプレートクラス定義 ===================
template<class Pos2d>
class TPos2d :public TDiType<Pos2d>	//テンプレートクラス：位置
{
public:
	// ===メンバ関数宣言===
	TPos2d();											//コンストラクタ
	TPos2d(const Pos2d& x, const Pos2d& y, const Pos2d& z);	//引数付きコンストラクタ
	TPos2d(const TPos2d& Obj);							//コピーコンストラクタ
	~TPos2d();										//デストラクタ
	Pos2d Distance(const TPos2d& Obj);					//距離計算
};	//型テンプレート

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
template<class Pos2d>	//テンプレート関数実装
TPos2d<Pos2d>::TPos2d()
	:TDiType<Pos2d>()	//委譲
{
}

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：const Pos2d & x：x軸上の位置の参照
	引数2：const Pos2d & y：y軸上の位置の参照
	引数3：const Pos2d & z：z軸上の位置の参照
	-------------------------------------
	戻値：なし
=========================================== */
template<class Pos2d>	//テンプレート関数実装
TPos2d<Pos2d>::TPos2d(const Pos2d & x, const Pos2d & y, const Pos2d & z)
	:TDiType<Pos2d>(x, y, z)	//委譲
{
}

/* ========================================
	コピーコンストラクタ
	-------------------------------------
	内容：コピー時に行う処理
	-------------------------------------
	引数1：const TPos2d & Obj：複製するデータ元の参照
	-------------------------------------
	戻値：なし
=========================================== */
template<class Pos2d>	//テンプレート関数実装
TPos2d<Pos2d>::TPos2d(const TPos2d & Obj)
	:TDiType<Pos2d>(Obj)	//委譲
{
}

/* ========================================
	デストラクタ
	------------------------------------ -
	内容：破棄時に行う処理
	------------------------------------ -
	引数1：なし
	------------------------------------ -
	戻値：なし
=========================================== */
template<class Pos2d>	//テンプレート関数実装
TPos2d<Pos2d>::~TPos2d()
{
}

/* ========================================
	距離計算
	------------------------------------ -
	内容：二点の位置情報をもとに距離を求める
	------------------------------------ -
	引数1：const TPos2d & Obj：距離を求める値の参照
	------------------------------------ -
	戻値：自身と引数の距離
=========================================== */
template<class Pos2d>	//テンプレート関数実装
Pos2d TPos2d<Pos2d>::Distance(const TPos2d & Obj)
{
	// =============== 変数宣言 =======================
	TPos Temp((*this - *Obj) ^ 2);	//引き算の結果

	// =============== 提供 =======================
	return (Pos)(pow((double)Temp.Total(), 0.5));	//計算結果
}

#endif // !___POS_2D_H___