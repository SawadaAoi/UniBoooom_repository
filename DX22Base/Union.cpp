/* ========================================
	HEW/UniBoooom!!
	---------------------------------------
	UNION実装
	---------------------------------------
	Union.cpp

	作成者	takagi

	変更履歴
	・2023/12/20 制作 takagi
	・2023/12/24 サイズ・フレーム変更をマネージャへ takagi
	・2024/01/11 ブレンドステート修正に伴う透明度調整 takagi
	・2024/02/06 継承元修正 takagi

========================================== */

// =============== インクルード ===================
#include "Union.h"		//自身のヘッダ
#include "Defines.h"	//画面情報用

// =============== 定数定義 ===================
const float MAX_MOVE(0.04f);	//高さ減少量
const int MAX_ANIM(1);			//アニメーション数
const TDiType<int> MAX_SEAT(1);	//1x1

/* ========================================
	コンストラクタ
	----------------------------------------
	内容：生成時に行う処理
	----------------------------------------
	引数1：const int & nFrame：存在するフレーム数
	----------------------------------------
	戻値：なし
=========================================== */
CUnion::CUnion(const int & nFrame)
	:CDrawAnim(MAX_ANIM, MAX_SEAT)	//委譲
	,m_pCnt(nullptr)					//縮小用カウンタ
{
	// =============== 初期化 ===================
	m_pCnt = new CFrameCnt(nFrame);	//カウント開始
}

/* ========================================
	デストラクタ
	----------------------------------------
	内容：破棄時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CUnion::~CUnion()
{
}

/* ========================================
	更新関数
	----------------------------------------
	内容：更新処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
void CUnion::Update()
{
	// =============== 更新 ===================
	CDrawAnim::Update();	//親の関数使用
	if (m_pCnt)	//ヌルチェック
	{
		--*m_pCnt;	//カウントダウン
		if (m_pCnt->IsFin())
		{
			delete m_pCnt;		//メモリ解放
			m_pCnt = nullptr;	//空アドレス代入
		}
		else
		{
			m_Transform.fPos.y += MAX_MOVE * m_pCnt->GetRate();	//位置更新
			SetAlpha(m_pCnt->GetRate());					//透明度更新
		}
	}
}

/* ========================================
	描画関数
	-------------------------------------
	内容：描画処理
	-------------------------------------
	引数：const E_DRAW_MODE & eMode：描画モード
	-------------------------------------
	戻値：なし
=========================================== */
void CUnion::Draw(const E_DRAW_MODE & eMode)
{
	if(m_pCnt)	//ヌルチェック
	{
		// =============== 描画 ===================
		CDrawAnim::Draw();	//親の関数使用
		if (!m_bAnim)	//アニメーション部分の描画が終わっている
		{
			C2dPolygon::Draw(E_DRAW_MODE_BILLBOARD);	//最後の場面を描き続ける
		}
	}
}

/* ========================================
	終了確認関数
	-------------------------------------
	内容：終了確認
	-------------------------------------
	引数：なし
	-------------------------------------
	戻値：このオブジェクトの役目が終了したか
=========================================== */
bool CUnion::IsFin()
{
	if (m_pCnt)
	{
		// =============== 提供 ===================
		return false;	//カウンタが存在する
	}
	else
	{
		// =============== 提供 ===================
		return true;	//カウンタが存在しない
	}
}