/* ========================================
	HEW/UniBoooom!!
	---------------------------------------
	ステージ3実装
	---------------------------------------
	Stage3.cpp

	作成者
			takagi
			nieda

	変更履歴
	・2023/11/16 制作 takagi
	・2023/12/12 Stage1の内容をコピー yamashita
	・2023/12/14 BGMの管理をSceneManagerに移動 yamashita
	・2023/12/15 ゲームスタート表示を書き変え nieda
	・2023/12/18 デバッグモード削除反映 takagi
	・2024/01/01 親コンストラクタ呼び出し takagi
	・2024/01/15 GameFinish()関数修正・RecordData()関数追加 takagi
	・2024/01/25 ヒットエフェクト関係の処理追加 Tei
	・2024/01/30 プレイヤー移動エフェクト関係の処理追加 Tei
	・2024/02/02 汗エフェクト処理追加 Tei
	・2024/02/05 ゲーム終了間際の加算スコアがトータルスコアに反映されるように(改) sawada
	・2024/02/09 GetType()関数削除・カメラ削除 takagi

========================================== */

// =============== インクルード ===================
#include "Stage3.h"	//自身のヘッダ
#include "CameraChase.h"
#include "HitStop.h"	//ヒットストップ

// =============== 定数・マクロ定義 ===================
const int STAGE_NUM = 3;	//ステージ番号

/* ========================================
	コンストラクタ
	----------------------------------------
	内容：生成時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CStage3::CStage3()
	:CStage(CUIStageManager::E_STAGE_3)	//親関数呼び出し
{
	m_pFloor = new CFloor(m_pPlayer->GetPosAddress(), CFloor::Stage3);	// 床生成
	m_pUIStageManager->GetBossGauge()->AddBossGauge(BOSS_GAUGE_S3[0].BossNum, BOSS_GAUGE_S3[0].startTime, BOSS_GAUGE_S3[0].maxTime);
	m_nStageNum = STAGE_NUM;
}

/* ========================================
	デストラクタ
	----------------------------------------
	内容：破棄時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CStage3::~CStage3()
{
	// =============== 記録 =====================
	RecordData();	//データ記録

	// =============== 終了 =====================
	SAFE_DELETE(m_pFloor);
}



/* ========================================
	次シーンゲッタ
	----------------------------------------
	内容：遷移したいシーンが何かを示す
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：遷移先シーンの種類
=========================================== */
CStage3::E_TYPE CStage3::GetNext() const
{
	// =============== 提供 ===================
	return CStage3::E_TYPE_RESULT;	//遷移先シーンの種類
}

