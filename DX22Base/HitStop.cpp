/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	ヒットストップ実装
	------------------------------------
	HitStop.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/11/17 作成 takagi
	・2023/11/21 挙動修正・静的に変更 takagi
	・2023/11/23 バグ修正 takagi

========================================== */

// =============== インクルード ===================
#include "HitStop.h"	//自身のヘッダ
#include "Defines.h"	//画面情報
#include "GameParameter.h"

// =============== 定数定義 =====================

#if MODE_GAME_PARAMETER
#else
const int FRAME_STOP_SOFT = 30;		//ストップ：軽　のフレーム数
const int FRAME_STOP_NORMAL = 60;	//ストップ：中　のフレーム数
const int FRAME_STOP_HEAVY = 120;	//ストップ：重　のフレーム数
const int FRAME_STOP_DEATH = 999;	//ストップ：死　のフレーム数
#endif

// =============== プロトタイプ宣言 =====================
int StopSoft(const int& nFrame);	//ストップ：軽
int StopNormal(const int& nFrame);	//ストップ：中
int StopHeavy(const int& nFrame);	//ストップ：重
int StopDeath(const int& nFrame);	//ストップ：死

// =============== グローバル変数宣言 =====================
unsigned char CHitStop::ms_ucFlag = 0x00;	//フラグ	char:1バイト(8ビット)
int CHitStop::ms_nFrame = -1;				//フレーム数カウンタ

/* ========================================
	コンストラクタ関数
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CHitStop::CHitStop()
{
}

/* ========================================
	デストラクタ関数
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CHitStop::~CHitStop()
{
}

/* ========================================
	更新関数
	-------------------------------------
	内容：更新処理	フラグの番号が若い物を優先して処理する構造に
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CHitStop::Update()
{
	// =============== 退避 ===================
	unsigned char ucTemp = ms_ucFlag;		//退避

	// =============== フラグ処理 ===================
	for (int nIdx = 0; nIdx < E_BIT_FLAG_MAX; nIdx++)
	{
		if (ucTemp & 0x01)	//下位ビットから優先して処理する
		{
			switch (0x01 << nIdx)	//添え字をビット列に変換
			{
				// =============== ストップ ===================
			case E_BIT_FLAG_STOP_SOFT:		//ヒットストップ実行：軽
				CallHitStop(StopSoft);		//ヒットストップフラグ管理
				break;						//分岐処理終了
			case E_BIT_FLAG_STOP_NORMAL:	//ヒットストップ実行：中
				CallHitStop(StopNormal);	//ヒットストップフラグ管理
				break;						//分岐処理終了
			case E_BIT_FLAG_STOP_HEAVY:		//ヒットストップ実行：重
				CallHitStop(StopHeavy);		//ヒットストップフラグ管理
				break;						//分岐処理終了
			case E_BIT_FLAG_STOP_DEATH:		//ヒットストップ実行：死
				CallHitStop(StopDeath);		//ヒットストップフラグ管理
				break;						//分岐処理終了
			default:						//その他
				break;						//分岐処理終了
			}
			break;	//ループ処理終了
		}
		else
		{
			ucTemp >>= 1;	//次のフラグ候補へ
		}
	}
}

/* ========================================
	フラグオン関数
	-------------------------------------
	内容：引数で立っているフラグを立てる(ヒットストップかを判定するフラグは対象外)
	-------------------------------------
	引数1：const unsigned char & ucBitFlag：対象のフラグ
	-------------------------------------
	戻値：なし
=========================================== */
void CHitStop::UpFlag(const unsigned char & ucBitFlag)
{
	// =============== 代入 ===================
	ms_ucFlag |= ucBitFlag;	//フラグ操作
}

/* ========================================
	フラグオフ関数
	-------------------------------------
	内容：引数で立っているフラグを降ろす(ヒットストップかを判定するフラグは対象外)
	-------------------------------------
	引数1：const unsigned char & ucBitFlag：対象のフラグ
	-------------------------------------
	戻値：なし
=========================================== */
void CHitStop::DownFlag(const unsigned char & ucBitFlag)
{
	// =============== 代入 ===================
	ms_ucFlag &= (ucBitFlag ^ 0xFF);	//フラグ操作
}

/* ========================================
	フラグセッタ関数
	-------------------------------------
	内容：引数で立っているフラグを逆転させる(ヒットストップ中かを判定するフラグは対象外)
	-------------------------------------
	引数1：const unsigned char & ucBitFlag：対象のフラグ
	-------------------------------------
	戻値：なし
=========================================== */
void CHitStop::SetFlag(const unsigned char & ucBitFlag)
{
	// =============== 代入 ===================
	ms_ucFlag ^= ucBitFlag;	//フラグ操作
}

/* ========================================
	ヒットストップ判定関数
	-------------------------------------
	内容：ヒットストップ中かどうかする
	-------------------------------------
	引数1：呼び出す関数のアドレス
	-------------------------------------
	戻値：なし
=========================================== */
bool CHitStop::IsStop()
{
	if (ms_ucFlag & E_BIT_FLAG_HIT_STOP)	//ヒットストップ中かどうか
	{
		return true;	//ヒットストップ中
	}
	else
	{
		return false;	//ヒットストップ中でない
	}
}

/* ========================================
	ヒットストップ呼び出し関数
	-------------------------------------
	内容：マクロ定義した関数をコールバックし、ヒットストップ中かのフラグを更新する
	-------------------------------------
	引数1：int(*CallBack)(const int&)：呼び出す関数のアドレス
	-------------------------------------
	戻値：なし
=========================================== */
void CHitStop::CallHitStop(int(*CallBack)(const int&))
{
	ms_nFrame = CallBack(ms_nFrame);
	if (ms_nFrame < 0)
	{
		DownFlag(0xFF);	//フラグ初期化
	}
	else
	{
		UpFlag(E_BIT_FLAG_HIT_STOP);	//フラグオン
	}
}

/* ========================================
	ヒットストップ関数・軽
	-------------------------------------
	内容：ヒットストップの時間管理法
	-------------------------------------
	引数1：const int& nFrame：現在フレーム数
	-------------------------------------
	戻値：なし
=========================================== */
int StopSoft(const int& nFrame)
{
	// =============== 退避 ===================
	int nTemp(nFrame);	//計算用

	// =============== 代入 ===================
	if (nFrame < 0)	//フレーム未設定
	{
		nTemp = FRAME_STOP_SOFT;	//フレーム数初期化
	}
	else
	{
		nTemp--;	//フレームカウント
	}

	// =============== 提供 ===================
	return nTemp;	//戻り値
}

/* ========================================
	ヒットストップ関数・中
	-------------------------------------
	内容：ヒットストップの時間管理法
	-------------------------------------
	引数1：const int& nFrame：現在フレーム数
	-------------------------------------
	戻値：なし
=========================================== */
int StopNormal(const int& nFrame)
{
	// =============== 退避 ===================
	int nTemp(nFrame);	//計算用

	// =============== 代入 ===================
	if (nFrame < 0)	//フレーム未設定
	{
		nTemp = FRAME_STOP_NORMAL;	//フレーム数初期化
	}
	else
	{
		nTemp--;	//フレームカウント
	}

	// =============== 提供 ===================
	return nTemp;	//戻り値
}

/* ========================================
	ヒットストップ関数・重
	-------------------------------------
	内容：ヒットストップの時間管理法
	-------------------------------------
	引数1：const int& nFrame：現在フレーム数
	-------------------------------------
	戻値：なし
=========================================== */
int StopHeavy(const int & nFrame)
{
	// =============== 退避 ===================
	int nTemp(nFrame);	//計算用

	// =============== 代入 ===================
	if (nFrame < 0)	//フレーム未設定
	{
		nTemp = FRAME_STOP_HEAVY;	//フレーム数初期化
	}
	else
	{
		nTemp--;	//フレームカウント
	}

	// =============== 提供 ===================
	return nTemp;	//戻り値
}

/* ========================================
	ヒットストップ関数・死
	-------------------------------------
	内容：ヒットストップの時間管理法
	-------------------------------------
	引数1：const int& nFrame：現在フレーム数
	-------------------------------------
	戻値：なし
=========================================== */
int StopDeath(const int & nFrame)
{
	// =============== 提供 ===================
	return FRAME_STOP_DEATH;	//永久に続ける
}