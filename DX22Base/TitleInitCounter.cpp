/* ========================================
	HEW/UniBoooom!!
	---------------------------------------
	タイトル開始時ズームアウト用カウンタ定義
	---------------------------------------
	TitleInitCounter.cpp

	作成者	takagi

	変更履歴
	・2024/02/02 制作 takagi
	・2024/02/05 誤字修正・一部引数除去 takagi
	・2024/02/08 コメント改修 takagi

========================================== */

// =============== インクルード =====================
#include "TitleInitCounter.h"	//自身のヘッダ

// =============== 定数・マクロ定義 =====================
const int FRAME = 90;	//計測するフレーム数

// =============== グローバル変数宣言 =====================
std::shared_ptr<CFrameCnt> CTitleInitCounter::ms_pCounter;	//縮小カウンタ
bool CTitleInitCounter::ms_bCountStarted = false;			//カウントを開始したことがあるか(true：ある)

/* ========================================
	更新関数
	----------------------------------------
	内容：更新処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
void CTitleInitCounter::Update()
{
	// =============== 更新 =====================
	if (ms_pCounter)	//ヌルチェック
	{
		if (ms_pCounter->IsFin())	//カウントが既に終了しているとき
		{
			ms_pCounter.reset();	//メモリ解放
		}
		else
		{
			--*ms_pCounter;	//カウントダウン
		}
	}
}

/* ========================================
	カウント開始関数
	----------------------------------------
	内容：カウントを開始する
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
void CTitleInitCounter::StartCount()
{
	// =============== 動的確保 =====================
	if (!ms_bCountStarted)	//一度のみ確保可能
	{
		ms_pCounter = std::make_shared<CFrameCnt>(FRAME);	//カウント開始
	}
}

/* ========================================
	自身提供関数
	----------------------------------------
	内容：自身を唯一つのみ存在させ、そのアドレスを提供する
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：自身のアドレス
=========================================== */
CTitleInitCounter& CTitleInitCounter::GetThis()
{
	// =============== 生成 =====================
	static CTitleInitCounter TitleInitCounter;	//自身のインスタンスを生成

	// =============== 提供 =====================
	return TitleInitCounter;	//生成された自身のアドレスを提供
}

/* ========================================
	カウンタ提供関数
	----------------------------------------
	内容：自身が唯一つ持つカウンタのアドレスを提供する
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：自身の持つカウンタ(観測のみ許可)
=========================================== */
const std::weak_ptr<const CFrameCnt> CTitleInitCounter::GetCounter() const
{
	// =============== 提供 =====================
	return ms_pCounter;	//カウンタ提供
}

/* ========================================
	コンストラクタ
	----------------------------------------
	内容：生成時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CTitleInitCounter::CTitleInitCounter()
{
}

/* ========================================
	コピーコンストラクタ
	----------------------------------------
	内容：複製時に行う処理
	----------------------------------------
	引数1：const CTitleInitCounter& Obj：コピー元
	----------------------------------------
	戻値：なし
=========================================== */
CTitleInitCounter::CTitleInitCounter(const CTitleInitCounter& Obj)
{	//Nothing to do
}

/* ========================================
	代入演算子
	----------------------------------------
	内容：複製に行う処理
	----------------------------------------
	引数1：const CTitleInitCounter& Obj：コピー元
	----------------------------------------
	戻値：何もしていない自身の参照
=========================================== */
CTitleInitCounter & CTitleInitCounter::operator=(const CTitleInitCounter & Obj)
{
	// =============== 提供 =====================
	return *this;	//自身の参照
}

/* ========================================
	デストラクタ
	----------------------------------------
	内容：破棄時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CTitleInitCounter::~CTitleInitCounter()
{
}