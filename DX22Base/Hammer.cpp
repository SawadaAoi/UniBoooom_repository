/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	Hammer用cpp
	------------------------------------
	Hammer.cpp
	------------------------------------
	作成者
		山本凱翔
	変更履歴
	・2023/11/08 コメント追加 yamashita
	・2023/11/08 できる限りの変数はメンバイニシャライザで初期化 yamashita
	・2023/11/08 定数HALF_PI、ANGULAR_ANGLE、ROTATE_RADIUSを定義 yamashita
	・2023/11/08 Updateに書かれていた処理をSwing関数に分けた　yamashita
	・2023/11/08 動的確保したポインタをdeleteからSAFE_DELETEに変更　yamashita
	・2023/11/09? 当たり判定用のSphereのゲット関数を追加 yamashita
	・2023/11/11 parameter用ヘッダ追加 suzumura
	・2023/11/14 SphereInfoの変更に対応 Takagi

========================================== */

// =============== インクルード ===================
#include "hammer.h"				// 自身のヘッダ
#include "Sphere.h"				// 球体の情報用ヘッダ
#include "GameParameter.h"		// 定数定義用ヘッダー

// =============== 定数定義 =======================
const float HALF_PI = 3.141592f / 2;	//ハンマーの開始地点のラジアン角(要修正)

#if MODE_GAME_PARAMETER
#else
const float ANGULAR_ANGLE = 0.1f;		//毎フレーム移動する角度量
const float ROTATE_RADIUS = 1.0f;		//ハンマーが回転するプレイヤーからの距離
const float HAMMER_COL_SIZE = 0.75f;	//ハンマーの当たり判定の大きさ
const float HAMMER_SIZE = 1.5f;			//ハンマーの大きさ
#endif

/* ========================================
   コンストラクタ関数
   ----------------------------------------
   内容：生成時に行う処理
   ----------------------------------------
   引数：なし
   ----------------------------------------
   戻値：なし
   ======================================== */
CHammer::CHammer()
	: m_Transform({ 0.0f }, { HAMMER_SIZE }, { 0.0f, HALF_PI, 0.0f })
	, m_stateangle(0.0f)
	, m_bHammer(false)
	, m_pHammerGeo(nullptr)
{
	m_pHammerGeo = new CSphere();							//ハンマーを仮表示するジオメトリー
	m_sphere.fRadius = HAMMER_COL_SIZE;
}

/* ========================================
   デストラクタ関数
   ----------------------------------------
   内容：破棄時に行う処理
   ----------------------------------------
   引数：なし
   ----------------------------------------
   戻値：なし
   ======================================== */
CHammer::~CHammer()
{
	SAFE_DELETE(m_pHammerGeo);
}

/* ========================================
   更新関数
   ----------------------------------------
   内容：更新を行う
   ----------------------------------------
   引数1：ハンマーの位置情報
   引数2：ハンマーの角度
   ----------------------------------------
   戻値：なし
   ======================================== */
void CHammer::Update(TPos3d<float> pPos, float angle)
{
	Swing(pPos,angle);	//回転による移動関数

	//現在角度が0になったら動作終了
	if (m_Transform.fRadian.y <= 0.0f)
	{
		m_bHammer = false;		//ハンマーの使用フラグをOFF
		m_Transform.fRadian.y = HALF_PI;	//ハンマーの現在角度を初期値に戻す
	}
}

/* ========================================
   描画関数
   ----------------------------------------
   内容：描画を行う
   ----------------------------------------
   引数：Cameraクラスのポインタ
   ----------------------------------------
   戻値：なし
   ======================================== */
void CHammer::Draw(const CCamera* pCamera)
{
	m_pHammerGeo->SetWorld(m_Transform.GetWorldMatrixSRT());			//ワールド座標にセット
	m_pHammerGeo->SetView(pCamera->GetViewMatrix());
	m_pHammerGeo->SetProjection(pCamera->GetProjectionMatrix());

	m_pHammerGeo->Draw();
}

/* ========================================
   フラグのゲット関数
   ----------------------------------------
   内容：ハンマーを振っている状態か取得する
   ----------------------------------------
   引数：なし
   ----------------------------------------
   戻値：bool
   ======================================== */
bool CHammer::Gethammer()
{
	return m_bHammer;
}

/* ========================================
   位置のゲット関数
   ----------------------------------------
   内容：ハンマーの位置を取得する
   ----------------------------------------
   引数：なし
   ----------------------------------------
   戻値：TPos3d<float> 
   ======================================== */
TPos3d<float> CHammer::GetPos()
{
	return m_Transform.fPos;
}

/* ========================================
   ハンマーの回転関数
   ----------------------------------------
   内容：ハンマーの回転による移動の処理
   ----------------------------------------
   引数1：プレイヤーのポジション
   引数2：プレイヤーの向いてる角度
   ----------------------------------------
   戻値：なし
   ======================================== */
void CHammer::Swing(TPos3d<float> pPos, float angle)
{
	m_bHammer = true;		//ハンマーの使用フラグをON
	m_stateangle = angle;	//-2.5f ;	//振り始めの角度	

	m_Transform.fRadian.y -= ANGULAR_ANGLE;				//現在の角度量から移動する角度の分移動
	float azimuth = m_stateangle + m_Transform.fRadian.y; // 方位角（角度）
	float inclination = 1.0f; // 仰角
	azimuth -= inclination;
	// 球面座標から直交座標系への変換
	m_Transform.fPos.x = pPos.x + ROTATE_RADIUS * sin(azimuth);

	//m_pos.y = pPos.y + ROTATE_RADIUS * cos(inclination);	//たぶん真横に振るのでY座標は動かさないのでコメントアウト /山下凌佑
	m_Transform.fPos.z = pPos.z + ROTATE_RADIUS * cos(azimuth);
}

/* ========================================
   Sphereのゲット関数
   ----------------------------------------
   内容：Sphereを返す処理
   ----------------------------------------
   引数1：なし
   ----------------------------------------
   戻値：当たり判定の球体
   ======================================== */
tagSphereInfo CHammer::GetSphere()
{
	return m_sphere;
}
