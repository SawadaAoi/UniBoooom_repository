/* ========================================
	HEW/UniBoooom!!
	---------------------------------------
	タイトル用背景実装
	---------------------------------------
	BgTitle.cpp
	---------------------------------------
	作成者	takagi

	変更履歴
	・2023/12/16 制作 takagi
	・2023/12/17 最初拡大され徐々に縮小するように takagi
	・2024/01/21 コメント改修 takagi

========================================== */

// =============== インクルード ===================
#include "BgTitle.h"	//自身のヘッダ
#include "Defines.h"	//画面情報用

// =============== 定数定義 ===================
const TPos3d<float> SCALE_L(static_cast<float>(SCREEN_WIDTH) * 2.0f,
	static_cast<float>(SCREEN_HEIGHT) * 2.0f, 0.0f);					//大きいときの大きさ
const TPos3d<float> SCALE_S(static_cast<float>(SCREEN_WIDTH),
	static_cast<float>(SCREEN_HEIGHT), 0.0f);							//小さいときの大きさ

/* ========================================
	コンストラクタ
	----------------------------------------
	内容：生成時に行う処理
	----------------------------------------
	引数1：const int& nWaitTime：待機時間
	----------------------------------------
	戻値：なし
=========================================== */
CBgTitle::CBgTitle(const int& nWaitTime)
	:CTitleObj(nWaitTime)	//委譲
	,m_pCntLtoS(nullptr)	//縮小用カウンタ
{
	// =============== 初期化 ===================
	SetSize(SCALE_L);	//大きさ初期化
}

/* ========================================
	デストラクタ
	----------------------------------------
	内容：破棄時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CBgTitle::~CBgTitle()
{
}

/* ========================================
	更新関数
	----------------------------------------
	内容：更新処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
void CBgTitle::Update()
{
	// =============== 更新 ===================
	CTitleObj::Update();	//親の関数使用
	if (m_pCntLtoS)	//ヌルチェック
	{
		--*m_pCntLtoS;	//カウントダウン
		if (m_pCntLtoS->IsFin())
		{
			delete m_pCntLtoS;		//メモリ解放
			m_pCntLtoS = nullptr;	//空アドレス代入
		}
		else
		{
			SetSize((SCALE_L - SCALE_S) * m_pCntLtoS->GetRate() + SCALE_S);	//カウンタ進行を利用した拡縮更新
		}
	}
}

/* ========================================
	縮小関数
	-------------------------------------
	内容：(拡大状態から)縮小する	//TODO:フラグ管理で一度しか機能しないようにする
	-------------------------------------
	引数：const int & nFrame：かけるフレーム数
	-------------------------------------
	戻値：なし
=========================================== */
void CBgTitle::ChangeLtoS(const int & nFrame)
{
	m_pCntLtoS = new CFrameCnt(nFrame);	//カウント開始
}