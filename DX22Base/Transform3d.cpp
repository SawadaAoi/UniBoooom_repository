/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	ワールド行列情報群実装
	------------------------------------
	Transform3d.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/11/08 仮制作 takagi

========================================== */

// =============== インクルード ===================
#include "Transform3d.h"	//自身のヘッダ

// =============== 定数定義 ===================
const TPos3d<float> INIT_POS(0.0f, 0.0f, 0.0f);		//初期位置
const TTriType<float> INIT_SCALE(0.0f, 0.0f, 0.0f);	//初期拡縮
const TTriType<float> INIT_RAD(0.0f, 0.0f, 0.0f);	//初期回転
const float INIT_ANGLE = 1.0f / 3.0f * 3.1415f;	//初期画角

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagTransform3d::tagTransform3d()
	:tagTransform3d(INIT_POS, INIT_SCALE, INIT_RAD)
{
}

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagTransform3d::tagTransform3d(const TPos3d<float>& fPos, const TTriType<float>& fScale, const TTriType<float>& fRadian)
{
}

/* ========================================
	コピーコンストラクタ
	-------------------------------------
	内容：コピー時に行う処理
	-------------------------------------
	引数1：const tagTransform3d & Obj：複製するデータ元の参照
	-------------------------------------
	戻値：なし
=========================================== */
tagTransform3d::tagTransform3d(const tagTransform3d & Obj)
{
	// =============== 複製 ===================
	this->fPos = Obj.fPos;			//位置コピー
	this->fScale = Obj.fScale;		//拡縮コピー
	this->fRadian = Obj.fRadian;	//回転角コピー
}

/* ========================================
	デストラクタ
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagTransform3d::~tagTransform3d()
{
}

/* ========================================
	TRSワールド行列取得関数
	-------------------------------------
	内容：TRS変換したワールド行列を提供
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：作成した行列
=========================================== */
DirectX::XMFLOAT4X4 tagTransform3d::GetWorldMatrixTRS()
{
	// =============== 変数宣言 ===================
	DirectX::XMFLOAT4X4 mat;	//行列格納用
	
	// =============== ワールド行列の計算 ===================
	DirectX::XMStoreFloat4x4(&mat, DirectX::XMMatrixTranspose(
		DirectX::XMMatrixTranslation(fPos.x, fPos.y, fPos.z)		//T:移動
		* DirectX::XMMatrixRotationX(fRadian.x) * DirectX::XMMatrixRotationY(fRadian.y) 
			* DirectX::XMMatrixRotationZ(fRadian.z)					//R:回転
		* DirectX::XMMatrixScaling(fScale.x, fScale.y, fScale.z)	//S:拡縮
	));	//TRS変換

	// =============== 提供 ===================
	return mat;	//行列提供
}

/* ========================================
	SRTワールド行列取得関数
	-------------------------------------
	内容：SRT変換したワールド行列を提供
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：作成した行列
=========================================== */
DirectX::XMFLOAT4X4 tagTransform3d::GetWorldMatrixSRT()
{
	// =============== 変数宣言 ===================
	DirectX::XMFLOAT4X4 mat;	//行列格納用

	// =============== ワールド行列の計算 ===================
	DirectX::XMStoreFloat4x4(&mat, DirectX::XMMatrixTranspose(
		DirectX::XMMatrixScaling(fScale.x, fScale.y, fScale.z)	//S:拡縮
		* DirectX::XMMatrixRotationX(fRadian.x) * DirectX::XMMatrixRotationY(fRadian.y)
			* DirectX::XMMatrixRotationZ(fRadian.z)				//R:回転
		* DirectX::XMMatrixTranslation(fPos.x, fPos.y, fPos.z)	//T:移動
	));	//SRT変換

	// =============== 提供 ===================
	return mat;	//行列提供
}
//
///* ========================================
//	代入演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに代入処理を行う
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：代入する値の参照
//	------------------------------------ -
//	戻値：代入が行われた自分自身
//=========================================== */
//tagTransform3d& tagTransform3d::operator=(const tagTransform3d & Obj)
//{
//	// =============== 複製 ===================
//	this->fPos = Obj.fPos;			//位置コピー
//	this->fScale = Obj.fScale;		//拡縮コピー
//	this->fRadian = Obj.fRadian;	//回転角コピー
//
//	// =============== 提供 ===================
//	return	*this;	//自身の参照
//}
//
///* ========================================
//	加算演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに加算処理を行う
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：加算する値の参照
//	------------------------------------ -
//	戻値：自身と引数の加算結果
//=========================================== */
//tagTransform3d tagTransform3d::operator+(const tagTransform3d & Obj)
//{
//	// =============== 提供 ===================
//	return { this->fPos + Obj.fPos, this->fScale + Obj.fScale, this->fScale + Obj.fScale };	//加算結果
//}
//
///* ========================================
//	加算代入演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに加算処理を行ったものを代入する
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：加算する値の参照
//	------------------------------------ -
//	戻値：引数が加算された自分自身
//=========================================== */
//tagTransform3d & tagTransform3d::operator+=(const tagTransform3d & Obj)
//{
//	// =============== 提供 ===================
//	return (*this = *this + Obj);	//実装済演算子を使用して処理を行い、自身の参照を返す
//}
//
///* ========================================
//	減算演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに減算処理を行う
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：減算する値の参照
//	------------------------------------ -
//	戻値：自身 - 引数の結果
//=========================================== */
//tagTransform3d tagTransform3d::operator-(const tagTransform3d & Obj)
//{
//	// =============== 提供 ===================
//	return { this->fPos - Obj.fPos, this->fScale - Obj.fScale, this->fRadian - Obj.fRadian };	//減算結果
//}
//
///* ========================================
//	減算代入演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに減算処理を行ったものを代入する
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：減算する値の参照
//	------------------------------------ -
//	戻値：引数が減算された自分自身
//=========================================== */
//tagTransform3d & tagTransform3d::operator-=(const tagTransform3d & Obj)
//{
//	// =============== 提供 ===================
//	return (*this = *this - Obj);	//実装済演算子を使用して処理を行い、自身の参照を返す
//}
//
///* ========================================
//	乗算演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに乗算処理を行う
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：乗算する値の参照
//	------------------------------------ -
//	戻値：自身と引数の乗算結果
//=========================================== */
//tagTransform3d tagTransform3d::operator*(const tagTransform3d & Obj)
//{
//	// =============== 提供 ===================
//	return { this->fPos * Obj.fPos, this->fScale * Obj.fScale, this->fRadian * Obj.fRadian };	//乗算結果
//}
//
///* ========================================
//	乗算代入演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに乗算処理を行ったものを代入する
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：乗算する値の参照
//	------------------------------------ -
//	戻値：引数が乗算された自分自身
//=========================================== */
//tagTransform3d & tagTransform3d::operator*=(const tagTransform3d & Obj)
//{
//	// =============== 提供 ===================
//	return (*this = *this * Obj);	//実装済演算子を使用して処理を行い、自身の参照を返す
//}
//
///* ========================================
//	除算演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに除算処理を行う
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：除算する値の参照
//	------------------------------------ -
//	戻値：自身 / 引数の結果
//=========================================== */
//tagTransform3d tagTransform3d::operator/(const tagTransform3d & Obj)
//{
//	// =============== 提供 ===================
//	return { this->fPos / Obj.fPos, this->fScale / Obj.fScale, this->fRadian / Obj.fRadian };	//除算結果
//}
//
///* ========================================
//	除算代入演算子
//	------------------------------------ -
//	内容：独立した３つのメンバー変数に対してそれぞれに除算処理を行ったものを代入する
//	------------------------------------ -
//	引数1：const tagTransform3d & Obj：除算する値の参照
//	------------------------------------ -
//	戻値：引数が除算された自分自身
//=========================================== */
//tagTransform3d & tagTransform3d::operator/=(const tagTransform3d & Obj)
//{
//	// =============== 提供 ===================
//	return (*this = *this / Obj);	//実装済演算子を使用して処理を行い、自身の参照を返す
//}