/* ========================================
   HEW/UniBoooom!!
   ---------------------------------------
   円柱実装
   ---------------------------------------
   Cylinder.cpp

   作成者	takagi

   変更履歴
   ・2023/11/05 制作 takagi

   ======================================== */



   // =============== インクルード ===================
#include "Cylinder.h"	//自身のヘッダ



/* ========================================
   関数：コンストラクタ
   ----------------------------------------
   内容：生成時に行う処理
   ----------------------------------------
   引数：なし
   ----------------------------------------
   戻値：なし
   ======================================== */
CCylinder::CCylinder()
{
	// =============== 元データの作成 ===============
	Vertex vtx[] = {
		// 手前、奥 ----------------------------------
			// -Z面
			{{-0.5f, 0.5f,-0.5f},{0.0f,0.0f}},	// 0
			{{ 0.5f, 0.5f,-0.5f},{1.0f,0.0f}},	// 1
			{{-0.5f,-0.5f,-0.5f},{0.0f,1.0f}},	// 2	
			{{ 0.5f,-0.5f,-0.5f},{1.0f,1.0f}},	// 3

			// +Z面
			{{  0.5f, 0.5f,0.5f},{0.0f,0.0f}},
			{{ -0.5f, 0.5f,0.5f},{1.0f,0.0f}},
			{{  0.5f,-0.5f,0.5f},{0.0f,1.0f}},
			{{ -0.5f,-0.5f,0.5f},{1.0f,1.0f}},

			// 左右 ----------------------------------
				// -X面
				{{-0.5f, 0.5f, 0.5f},{0.0f,0.0f}},
				{{-0.5f, 0.5f,-0.5f},{1.0f,0.0f}},
				{{-0.5f,-0.5f,0.5f},{0.0f,1.0f}},
				{{-0.5f,-0.5f,-0.5f},{1.0f,1.0f}},

				// +X面
				{{0.5f, 0.5f,-0.5f},{0.0f,0.0f}},
				{{0.5f, 0.5f, 0.5f},{1.0f,0.0f}},
				{{0.5f,-0.5f,-0.5f},{0.0f,1.0f}},
				{{0.5f,-0.5f, 0.5f},{1.0f,1.0f}},

				// 上下 ----------------------------------
					// -Y面
					{{-0.5f,-0.5f,-0.5f},{0.0f,0.0f}},
					{{ 0.5f,-0.5f,-0.5f},{1.0f,0.0f}},
					{{-0.5f,-0.5f, 0.5f},{0.0f,1.0f}},
					{{ 0.5f,-0.5f, 0.5f},{1.0f,1.0f}},

					// +Y面
					{{-0.5f,0.5f, 0.5f},{0.0f,0.0f}},
					{{ 0.5f,0.5f, 0.5f},{1.0f,0.0f}},
					{{-0.5f,0.5f,-0.5f},{0.0f,1.0f}},
					{{ 0.5f,0.5f,-0.5f},{1.0f,1.0f}},
	};
	int idx[] = {
		0,1,2,1,3,2,
		4,5,6,5,7,6,
		8,9,10,9,11,10,
		12,13,14,13,15,14,
		16,17,18,17,19,18,
		20,21,22,21,23,22,

	};

	// =============== バッファの作成 ===============
	MeshBuffer::Description desc = {};
	desc.pVtx = vtx;
	//desc.vtxCount	= sizeof(vtx) / sizeof(Vertex);			// 頂点の数
	desc.vtxCount = _countof(vtx);		// 頂点の数(_countofは配列の数を数える)
	desc.vtxSize = sizeof(Vertex);		// 頂点一つあたりのデータサイズ
	desc.pIdx = idx;
	desc.idxCount = _countof(idx);		// インデックスの数
	desc.idxSize = sizeof(int);			// インデックス一つあたりのデータサイズ
	desc.topology = D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
	//desc.topology = D3D11_PRIMITIVE_TOPOLOGY_LINELIST;
	m_pObj = new MeshBuffer(desc);
}

/* ========================================
   関数：コピーコンストラクタ
   ----------------------------------------
   内容：複製時に行う処理
   ----------------------------------------
   引数：CGeometry & Obj：コピー元
   ----------------------------------------
   戻値：なし
   ======================================== */
CCylinder::CCylinder(CCylinder & Obj)
{
}

/* ========================================
   関数：デストラクタ
   ----------------------------------------
   内容：破棄時に行う処理
   ----------------------------------------
   引数：なし
   ----------------------------------------
   戻値：なし
   ======================================== */
CCylinder::~CCylinder()
{
}

/* ========================================
   関数：描画関数
   ----------------------------------------
   内容：描画処理
   ----------------------------------------
   引数：なし
   ----------------------------------------
   戻値：なし
   ======================================== */
void CCylinder::Draw()
{
	// =============== 検査 ===============
	if (m_pObj == nullptr)	//ヌルチェック
	{
		// =============== 終了 ===============
		return;	//処理終了
	}

	// =============== 描画 ===============
	m_pVS->WriteBuffer(0, m_WVP);	//書き込み
	m_pVS->Bind();					//頂点シェーダ使用
	m_pPS->Bind();					//ピクセルシェーダ使用
	m_pObj->Draw();					//立方体描画
}