/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	カメラ用抽象クラス実装
	------------------------------------
	Camera.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/10/24 仮制作 takagi
	・2023/11/02 メンバー変数追加 takagi
	・2023/11/04 更新関数の実装部分削除 takagi
	・2023/11/06 フラグ整理・コメント修正 takagi
	・2023/11/07 GetViewMatrix()関数にconst修飾子付与・コメント修正 takagi

========================================== */



// =============== インクルード ===================
#include "Camera.h"	//自身のヘッダ

// =============== 定数定義 ===================
const TPos3d<float> INIT_POS(0.0f, 1.6f, -3.0f);	//初期位置
const float INIT_ANGLE = 1.0f / 3.0f * 3.1415f;	//初期画角

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：const E_DRAW_TYPE& eDraw：2D表示か3D表示か
	-------------------------------------
	戻値：なし
=========================================== */
CCamera::CCamera(const E_DRAW_TYPE& eDraw)
	:m_fPos(INIT_POS),	//位置
	m_fLook(0.0f, 0.0f, 10.0f),	//注視点
	m_fUp(0.0f, 1.0f, 1.0f),	//上方ベクトル
	m_fAngle(INIT_ANGLE),		//角度
	m_fNear(2.0f),				//画面手前
	m_fFar(50.0f)				//画面奥
{
	//＞分岐処理
	switch (eDraw)	//投影選択
	{
		// =============== 2D表示 ===================
	case E_DRAW_TYPE_2D:
		UpFlag(E_BIT_FLAG_AS_2D);	//2Dフラグオン
		break;	//分岐処理終了
		// =============== 3D表示 ===================
	case E_DRAW_TYPE_3D:
		DownFlag(E_BIT_FLAG_AS_2D);	//2Dフラグオフ
		break;	//分岐処理終了
	}
}

/* ========================================
	デストラクタ
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CCamera::~CCamera()
{
}

/* ========================================
	フラグオン関数
	-------------------------------------
	内容：引数で立っているフラグを立てる
	-------------------------------------
	引数1：const unsigned char & ucBitFlag
	-------------------------------------
	戻値：なし
=========================================== */
void CCamera::UpFlag(const unsigned char & ucBitFlag)
{
	// =============== 代入 ===================
	m_ucFlag |= ucBitFlag;	//フラグ操作
}

/* ========================================
	フラグオフ関数
	-------------------------------------
	内容：引数で立っているフラグを降ろす
	-------------------------------------
	引数1：const unsigned char & ucBitFlag
	-------------------------------------
	戻値：なし
=========================================== */
void CCamera::DownFlag(const unsigned char & ucBitFlag)
{
	// =============== 代入 ===================
	m_ucFlag &= !ucBitFlag;	//フラグ操作
}

/* ========================================
	フラグセッタ
	-------------------------------------
	内容：引数で立っているフラグを逆転させる
	-------------------------------------
	引数1：const unsigned char & ucBitFlag
	-------------------------------------
	戻値：なし
=========================================== */
void CCamera::SetFlag(const unsigned char & ucBitFlag)
{
	// =============== 代入 ===================
	m_ucFlag ^= ucBitFlag;	//フラグ操作
}

/* ========================================
	ビュー行列取得関数
	-------------------------------------
	内容：カメラのビュー行列を提供
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：作成した行列
=========================================== */
DirectX::XMFLOAT4X4 CCamera::GetViewMatrix() const
{
	// =============== 変数宣言 ===================
	DirectX::XMFLOAT4X4 mat;

	// =============== ビュー行列の計算 ===================
	DirectX::XMStoreFloat4x4(&mat, DirectX::XMMatrixTranspose(
		DirectX::XMMatrixLookAtLH(
			DirectX::XMVectorSet(m_fPos.x, m_fPos.y, m_fPos.z, 0.0f),		//カメラ位置
			DirectX::XMVectorSet(m_fLook.x, m_fLook.y, m_fLook.z, 0.0f),	//注視点
			DirectX::XMVectorSet(m_fUp.x, m_fUp.y, m_fUp.z, 0.0f)))			//アップベクトル
	);	//ビュー変換

	// =============== 提供 ===================
	return mat;	//行列提供
}

/* ========================================
	プロジェクション行列取得関数
	-------------------------------------
	内容：カメラのプロジェクション行列を提供
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：作成した行列
=========================================== */
DirectX::XMFLOAT4X4 CCamera::GetProjectionMatrix() const
{
	// =============== 変数宣言 ===================
	DirectX::XMFLOAT4X4 mat;	//行列格納用

	// =============== プロジェクション行列の計算 ===================
	DirectX::XMStoreFloat4x4(&mat, DirectX::XMMatrixTranspose(
		DirectX::XMMatrixPerspectiveFovLH(m_fAngle, ASPECT, m_fNear, m_fFar)));	//プロジェクション変換
	
	// =============== 提供 ===================
	return mat;	//行列提供
}

/* ========================================
	フラグ別処理関数
	-------------------------------------
	内容：フラグによって判断される各処理を実行する
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CCamera::HandleFlag()
{
	// =============== 振動フラグ ===================
	if (m_ucFlag & E_BIT_FLAG_VIBRATION)
	{
		// =============== 振動 ===================
		Vibration();	//画面揺れ
	}
}

/* ========================================
	振動関数
	-------------------------------------
	内容：画面を振動させる
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CCamera::Vibration()
{
}