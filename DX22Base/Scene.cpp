/* ========================================
	HEW/UniBoooom!!
	---------------------------------------
	シーン用抽象クラス実装
	---------------------------------------
	Scene.cpp

	作成者
			takagi
			nieda

	変更履歴
	・2023/10/24 仮制作 takagi
	・2023/11/05 現段階のコーディング規約適用 takagi
	・2023/11/07 コメント修正 takagi
	・2023/11/16 列挙追加・終了フラグ周り実装 takagi
	・2023/11/22 2D描画関数を追加 nieda
	・2023/11/23 サウンドファイル読み込み関数追加 nieda
	・2023/11/27 カメラ初期化 takagi
	・2023/12/07 ビュー行列取得にカメラ使用 takagi
	・2023/12/08 カメラがない時にUIが表示できない問題を修正

========================================== */

// =============== インクルード ===================
#include "Scene.h"	//自身のヘッダ
#include "Sprite.h"
#include "GameParameter.h"


/* ========================================
	コンストラクタ
	----------------------------------------
	内容：生成時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CScene::CScene()
	: m_bFinish(false)	//シーン開始
	,m_pCamera(nullptr)	//カメラ
{
}

/* ========================================
	デストラクタ
	----------------------------------------
	内容：破棄時に行う処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
CScene::~CScene()
{
	SAFE_DELETE(m_pCamera);
	SAFE_DELETE(m_pBGM);
	SAFE_DELETE(m_pBGMSpeaker);
}

/* ========================================
	更新関数
	----------------------------------------
	内容：更新処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
void CScene::Update()
{
}

/* ========================================
	描画関数
	----------------------------------------
	内容：描画処理
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
=========================================== */
//!memo(見たら消してー)：constが邪魔になったら外してね(.hの方も)
void CScene::Draw()
{
}

/* ========================================
	終了確認関数
	----------------------------------------
	内容：シーンをやめるかどうかのフラグを返す
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：true:シーンをやめたい / false:シーンを続けたい
=========================================== */
bool CScene::IsFin() const
{
	// =============== 提供 =====================
	return m_bFinish;	//終了要求フラグ
}

/* ========================================
	2D描画関数
	-------------------------------------
	内容：テクスチャの描画処理
	-------------------------------------
	引数1：表示位置のX座標
	-------------------------------------
	引数2：表示位置のY座標
	-------------------------------------
	引数3：表示するテクスチャの縦幅
	-------------------------------------
	引数4：表示するテクスチャの横幅
	-------------------------------------
	引数5：表示するテクスチャのポインタ
	-------------------------------------
	戻値：なし
========================================== = */
void CScene::Draw2d(float posX, float posY, float h, float w, Texture* pTexture)
{
	DirectX::XMFLOAT4X4 mat[3];

	// ワールド行列はXとYのみを考慮して作成
	DirectX::XMMATRIX world = DirectX::XMMatrixTranslation(posX, posY, 0.0f);	// ワールド行列（必要に応じて変数を増やしたり、複数処理を記述したりする）
	DirectX::XMStoreFloat4x4(&mat[0], DirectX::XMMatrixTranspose(world));

	// ビュー行列は2Dだとカメラの位置があまり関係ないので、単位行列を設定する
	DirectX::XMStoreFloat4x4(&mat[1], DirectX::XMMatrixIdentity());

	// スプライトの設定
	Sprite::SetWorld(mat[0]);
	Sprite::SetView(mat[1]);
	if (m_pCamera)	//ヌルチェック
	{
		Sprite::SetProjection(m_pCamera->GetProjectionMatrix(CCamera::E_DRAW_TYPE_2D));	// 平行投影行列を設定
		Sprite::SetSize(DirectX::XMFLOAT2(h, w));
	}
	else
	{
		DirectX::XMStoreFloat4x4(&mat[2], DirectX::XMMatrixTranspose(DirectX::XMMatrixOrthographicOffCenterLH(0.0f, 1280.0f, 720.0f, 0.0f, 0.1f, 10.0f)));
		Sprite::SetProjection(mat[2]);	// 平行投影行列を設定
		Sprite::SetSize(DirectX::XMFLOAT2(h, -w));
	}
	Sprite::SetUVScale(DirectX::XMFLOAT2(1.0f, 1.0f));
	Sprite::SetUVPos(DirectX::XMFLOAT2(0.0f, 0.0f));
	Sprite::SetTexture(pTexture);
	Sprite::Draw();
}

/* ========================================
   カメラポインタ取得関数
   -------------------------------------
   内容：カメラクラスのポインタ取得
   -------------------------------------
   引数1：無し
   -------------------------------------
   戻値：無し
=========================================== */
CCamera* CScene::GetCamera()
{
	return m_pCamera;
}