/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	戦闘情報実装
	------------------------------------
	BattleData.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/12/07 制作 takagi

========================================== */

// =============== インクルード ===================
#include "BattleData.h"	//自身のヘッダ
#include <filesystem>	//ファイルシステム

#if _DEBUG
#include <Windows.h>		//メッセージボックス用
#endif

// =============== 定数定義 ===================
const std::string NAME("データなし");			//名前(デフォルト)
const std::string DATAFILE("BattleData.bin");	//データ読み書き用のファイル名

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagBattleData::tagBattleData()
	:tagBattleData(0, 0, 0)
{
}

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：const int & nAliveTime：生存時間
	引数2：const int & nKill：討伐数
	引数3：const int & nTotalScore：総スコア
	-------------------------------------
	戻値：なし
=========================================== */
tagBattleData::tagBattleData(const int & nAliveTime, const int & nKill, const int & nTotalScore)
	:sName(NAME)	//名前
{
	// =============== 初期化 ===================
	this->nAliveTime = nAliveTime;		//生存時間初期化
	this->nKill = nKill;				//討伐数初期化
	this->nTotalScore = nTotalScore;	//総スコア初期化
}

/* ========================================
	コピーコンストラクタ
	-------------------------------------
	内容：コピー時に行う処理
	-------------------------------------
	引数1：const tagBattleData & Obj：複製するデータ元の参照
	-------------------------------------
	戻値：なし
=========================================== */
tagBattleData::tagBattleData(const tagBattleData & Obj)
{
	// =============== 複製 ===================
	this->nAliveTime = Obj.nAliveTime;		//生存時間初期化
	this->nKill = Obj.nKill;				//討伐数初期化
	this->nTotalScore = Obj.nTotalScore;	//総スコア初期化
}

/* ========================================
	デストラクタ
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagBattleData::~tagBattleData()
{
}

/* ========================================
	データロード関数
	-------------------------------------
	内容：データ読み込み処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void tagBattleData::Load()
{
	// =============== ファイル操作 ===================
	if (std::fstream FileStream{ DATAFILE, std::ios_base::in | std::ios_base::binary })	//ファイル使用開始
	{
		FileStream >> *this;	//データ読み込み
		FileStream.close();		//ファイル操作終了
	}
#if _DEBUG
	else
	{
		MessageBox(nullptr, "ファイルが読み込めませんした", "BattleData.cpp->Error", MB_OK);	//エラー通知
	}
#endif
}

/* ========================================
	データセーブ関数
	-------------------------------------
	内容：データ保存処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void tagBattleData::Save()
{
	// =============== ファイル操作 ===================
	std::fstream FileStream{ DATAFILE
		, std::ios_base::out | std::ios_base::binary };	//ファイル使用開始
	FileStream << *this;								//データ保存
	FileStream.close();									//ファイル操作終了
}