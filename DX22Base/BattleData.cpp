/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	戦闘情報実装
	------------------------------------
	BattleData.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/12/07 制作 takagi
	・2023/12/11 分秒取得追加 takagi
	・2023/12/12 分秒取得修正 takagi
	・2023/12/28 保存する項目を追加 Sawada

========================================== */

// =============== インクルード ===================
#include "BattleData.h"	//自身のヘッダ
#include <filesystem>	//ファイルシステム

#if _DEBUG
#include <Windows.h>		//メッセージボックス用
#endif

// =============== 定数定義 ===================
const std::string NAME("データなし");			//名前(デフォルト)
const std::string DATAFILE("BattleData.bin");	//データ読み書き用のファイル名

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagBattleData::tagBattleData()
	:tagBattleData(0, 0, 0, 0, 0)
{
}

/* ========================================
	コンストラクタ
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：const int & nAliveTime：生存時間
	引数2：const int & nTotalKill：討伐数
	引数3：const int & nTotalScore：総スコア
	引数3：const int & nMaxCombo：最大コンボ数
	引数3：const int & nStageNum：プレイステージ番号
	-------------------------------------
	戻値：なし
=========================================== */
tagBattleData::tagBattleData(const int& nAliveTime, const int& nTotalKill, 
	const int& nTotalScore, const int& nMaxCombo, const int & nStageNum)
	:sName(NAME)	//名前
{
	// =============== 初期化 ===================
	this->nAliveTime = nAliveTime;		// 生存時間初期化
	this->nTotalKill = nTotalKill;		// 討伐数初期化
	this->nTotalScore = nTotalScore;	// 総スコア初期化
	this->nMaxCombo = nMaxCombo;		// 最大コンボ数
	this->nStageNum = nStageNum;		// プレイステージ番号
}

/* ========================================
	コピーコンストラクタ
	-------------------------------------
	内容：コピー時に行う処理
	-------------------------------------
	引数1：const tagBattleData & Obj：複製するデータ元の参照
	-------------------------------------
	戻値：なし
=========================================== */
tagBattleData::tagBattleData(const tagBattleData & Obj)
{
	// =============== 複製 ===================
	this->nAliveTime = Obj.nAliveTime;		// 生存時間初期化
	this->nTotalKill = Obj.nTotalKill;		// 討伐数初期化
	
	// スライム種類数分格納する
	for (int i = 0; i < 5; i++)
	{
		this->nKill[i] = Obj.nKill[i];		// 討伐数初期化
	}
	this->nTotalScore = Obj.nTotalScore;	// 総スコア初期化
	
	// ステージ数分格納する
	for (int i = 0; i < 3; i++)
	{
		this->nHighScore[i] = Obj.nHighScore[i];	// 総スコア初期化
	}
	this->nMaxCombo = Obj.nMaxCombo;		// 総スコア初期化
	this->nStageNum = Obj.nStageNum;		// 総スコア初期化
	this->bClearFlg = Obj.bClearFlg;		// 総スコア初期化
}											   

/* ========================================
	デストラクタ
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
tagBattleData::~tagBattleData()
{
}

/* ========================================
	データロード関数
	-------------------------------------
	内容：データ読み込み処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void tagBattleData::Load()
{
	// =============== ファイル操作 ===================
	if (std::fstream FileStream{ DATAFILE, std::ios_base::in | std::ios_base::binary })	//ファイル使用開始
	{
		FileStream >> *this;	//データ読み込み
		FileStream.close();		//ファイル操作終了
	}
#if _DEBUG
	else
	{
		MessageBox(nullptr, "ファイルが読み込めませんした", "BattleData.cpp->Error", MB_OK);	//エラー通知
	}
#endif
}

/* ========================================
	データセーブ関数
	-------------------------------------
	内容：データ保存処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void tagBattleData::Save()
{
	// =============== ファイル操作 ===================
	std::fstream FileStream{ DATAFILE
		, std::ios_base::out | std::ios_base::binary };	//ファイル使用開始
	FileStream << *this;								//データ保存
	FileStream.close();									//ファイル操作終了
}

/* ========================================
	分取得関数
	-------------------------------------
	内容：何雰生きたか返す
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：生きた時間[m]
=========================================== */
int tagBattleData::GetMinute()
{
	// =============== 提供 ===================
	return (nAliveTime / 3600);	//分(1to60)
}

/* ========================================
	秒取得関数
	-------------------------------------
	内容：何秒生きたか返す
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：生きた時間[s]
=========================================== */
int tagBattleData::GetSecond()
{
	// =============== 提供 ===================
	return ((nAliveTime % 3600) /60);	//秒(1to60)
}

/* ========================================
	コンマ取得関数
	-------------------------------------
	内容：コンマ何秒生きたか返す
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：生きた時間[s]
=========================================== */
int tagBattleData::GetCommaSecond()
{
	// =============== 提供 ===================
	return (nAliveTime % 60);	//コンマ秒(1to60)
}