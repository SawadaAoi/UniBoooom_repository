/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	オブジェクト実装
	------------------------------------
	Object.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2024/01/18 作成 takagi
	・2024/01/21 リファクタリング・汎化作業 takagi

========================================== */

// =============== インクルード ===================
#include "Object.h"		//自身のヘッダ
#include "Delete.h"		//削除マクロ
#include "CameraDef.h"	//インスタンス候補

// =============== グローバル変数宣言 =====================
int CObject::ms_nCntObject;				//自身の生成数
const CCamera* CObject::ms_pCameraDef;	//疑似カメラ

/* ========================================
	コンストラクタ関数
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CObject::CObject()
	:m_Transform(INIT_POS, INIT_SCALE, INIT_RADIAN)	//ワールド座標
	,m_pCamera(nullptr)								//カメラ
{
	// =============== 静的作成 ===================
	if (0 == ms_nCntObject)	//現在、他にこのクラスが作成されていない時
	{
		// =============== 疑似カメラ作成 ===================
		ms_pCameraDef = new CCameraDef();	//デフォルトのカメラ
	}

	// =============== 初期化 ===================
	SetCamera(nullptr);	//カメラ初期化

	// =============== カウンタ ===================
	ms_nCntObject++;	//自身の数カウント
}

/* ========================================
	コピーコンストラクタ関数
	-------------------------------------
	内容：コピー時に行う処理
	-------------------------------------
	引数1：const CObject & Obj：コピー元の参照
	-------------------------------------
	戻値：なし
=========================================== */
CObject::CObject(const CObject & Obj)
	:m_Transform(Obj.m_Transform)	//ワールド座標
{
	// =============== カウンタ ===================
	ms_nCntObject--;			//自身の数カウント

	// =============== 解放 ===================
	if (0 == ms_nCntObject)	//静的確保物を解放するか
	{
		//SAFE_DELETE(ms_pVtx);		//頂点情報解放
		//SAFE_DELETE(ms_pIdx);		//頂点インデックス解放
		//SAFE_DELETE(ms_pVtxBuffer);	//頂点バッファ解放
		//SAFE_DELETE(ms_pIdxBuffer);	//インデックスバッファ解放
		SAFE_DELETE(ms_pCameraDef);		//疑似カメラ削除
	}
}

/* ========================================
	デストラクタ関数
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CObject::~CObject()
{
}

/* ========================================
	位置ゲッタ関数
	-------------------------------------
	内容：自身の座標位置を提供
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：自身の座標位置
=========================================== */
TPos3d<float> CObject::GetPos() const
{
	// =============== 提供 ===================
	return m_Transform.fPos;	//位置
}

/* ========================================
	Z位置提供関数
	-------------------------------------
	内容：Zソートのため、自身のZ位置を提供
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：自身のZ値の参照(変更不可)
=========================================== */
const float& CObject::GetPosZ() const
{
	// =============== 提供 ===================
	return m_Transform.fPos.z;	//z位置
}

/* ========================================
	位置セッタ関数
	-------------------------------------
	内容：位置登録
	-------------------------------------
	引数1：const TPos3d<float> & fPos：新規位置情報
	-------------------------------------
	戻値：なし
=========================================== */
void CObject::SetPos(const TPos3d<float> & fPos)
{
	// =============== 格納 ===================
	m_Transform.fPos = fPos;	//位置情報格納
}

/* ========================================
	大きさセッタ関数
	-------------------------------------
	内容：大きさ登録
	-------------------------------------
	引数1：const TTriType<float> & fScale：新規拡縮情報
	-------------------------------------
	戻値：なし
=========================================== */
void CObject::SetSize(const TTriType<float> & fScale)
{
	// =============== 格納 ===================
	m_Transform.fScale = fScale;	//拡縮格納
}

/* ========================================
	回転セッタ関数
	-------------------------------------
	内容：回転登録
	-------------------------------------
	引数1：const TTriType<float> & fRotate：新規回転情報
	-------------------------------------
	戻値：なし
=========================================== */
void CObject::SetRotate(const TTriType<float> & fRotate)
{
	// =============== 格納 ===================
	m_Transform.fRadian = fRotate;	//回転格納
}

/* ========================================
	ワールド行列セッタ関数
	-------------------------------------
	内容：ワールド行列登録
	-------------------------------------
	引数1：const TPos3d<float> & fPos：新規ワールド系情報
	-------------------------------------
	戻値：なし
=========================================== */
void CObject::SetTransform(const tagTransform3d & Transform)
{
	// =============== 格納 ===================
	m_Transform = Transform;	//ワールド行列格納
}

/* ========================================
	カメラセッタ関数
	-------------------------------------
	内容：カメラ登録
	-------------------------------------
	引数1：const CCamera* pCamera：自身を映すカメラ
	-------------------------------------
	戻値：なし
=========================================== */
void CObject::SetCamera(const CCamera* pCamera)
{
	// =============== 変数宣言 ===================
	int nCnt = 0;				//ループカウント用
	const CCamera* pCameraUse;	//カメラアドレス退避用

	// =============== 初期化 ===================
	if (pCamera)	//ヌルチェック
	{
		pCameraUse = pCamera;		//新規カメラ登録
	}
	else
	{
		pCameraUse = ms_pCameraDef;	//カメラ代用
	}

	// =============== カメラ登録 ===================
	m_pCamera = pCameraUse;	//カメラ登録
}