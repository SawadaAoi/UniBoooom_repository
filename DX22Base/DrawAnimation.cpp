/* ========================================
	HEW/UniBoooom!!
	---------------------------------------
	UIアニメーション描画用ソース
	---------------------------------------
	DrawAnimation.cpp
	---------------------------------------
	作成者	nieda

	変更履歴
	・2023/12/08 新規作成 nieda
	・2023/12/09 続き nieda
	・2023/12/11 続き nieda
	・2023/12/12 tkg先生の指導により2dpolygonに対応 nieda
	・2023/12/15 デフォルトだとサイズが小さすぎたので変更できるよう修正 nieda
	・2023/12/16 描画位置を変更できるよう修正 nieda
	・2023/12/16 コンストラクタの引数を最小化・不要なポインタ削除 takagi
	・2023/12/17 一部引数参照化 takagi
	・2023/12/18 最初に分割前の画像が表示される不具合を修正 nieda
	・2024/01/20 リファクタリング takagi
	・2024/01/21 コメント改修 takagi

========================================== */

// =============== インクルード ===================
#include "DrawAnimation.h"	// 自身のヘッダ

/* ========================================
	コンストラクタ
	----------------------------------------
	内容：生成時に行う処理
	----------------------------------------
	引数1：分割数の最大数
	引数2：縦横の分割数の最大数
	引数3：アニメーションの切り替え間隔
	----------------------------------------
	戻値：なし
=========================================== */
CDrawAnim::CDrawAnim(int nSplitMax, TDiType<int> nSplit, int nCnt)
	: m_nNumAnim(0)
	, m_nNumAnimMax(0)
	, m_nSplitNum(0, 0)
	, m_fUvPos(0.0f, 0.0f)
	, m_fUvScale(0.0f, 0.0f)
	, m_nFrameCnt(0)
	, m_nSwitchCnt(0)
	, m_bLoop(false)
	, m_bAnim(true)
{
	m_nNumAnimMax = nSplitMax;	// 分割数の最大値を格納
	m_nSplitNum = nSplit;		// 縦横の分割数を格納
	m_fUvScale = { 1.0f / m_nSplitNum.x, 1.0f / m_nSplitNum.y };	// UV分割サイズを格納
	m_nSwitchCnt = nCnt;		// アニメーションの切り替え間隔を格納
	SetUvOffset(m_fUvPos);	// UV座標をセット
	SetUvScale(m_fUvScale);	// UV分割サイズをセット
}

/* ========================================
	2Dアニメーション更新関数
	-------------------------------------
	内容：2Dアニメーションの更新処理
	-------------------------------------
	引数：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CDrawAnim::Update()
{
	if (m_bAnim)
	{
		m_nFrameCnt++;	//描画切り替え用カウントを1進める

		if (m_nFrameCnt > m_nSwitchCnt)	//一定時間経過したら描画を更新する
		{
			m_nFrameCnt = 0;											//カウントをリセット
			m_fUvPos.x = (m_fUvScale.x) * (m_nNumAnim % m_nSplitNum.x);	//描画するUV座標を計算
			m_fUvPos.y = (m_fUvScale.y) * (m_nNumAnim / m_nSplitNum.x);	//描画するUV座標を計算

			m_nNumAnim++;			//描画するアニメーション番号を更新
			SetUvOffset(m_fUvPos);	//UV座標をセット
			SetUvScale(m_fUvScale);	//UV分割サイズをセット
		}

		if (m_nNumAnim == m_nNumAnimMax)	//最下段の描画が終わったら
		{
			m_nNumAnim = 0;	//カウントをリセット

			if (!m_bLoop)	//ループ再生フラグがOFFなら
			{
				m_bAnim = false;		//表示フラグをOFF
			}
		}
	}
}

/* ========================================
	2Dアニメーション描画関数
	-------------------------------------
	内容：2Dアニメーションの描画処理
	-------------------------------------
	引数：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CDrawAnim::Draw() const
{
	if (m_bAnim)	//描画フラグがONの間は描画する
	{
		C2dObject::Draw();	//描画
	}
}

/* ========================================
	ループ再生フラグセット関数
	-------------------------------------
	内容：ループ再生フラグをセット
	-------------------------------------
	引数：ループ再生判定フラグ（trueならループする）
	-------------------------------------
	戻値：なし
=========================================== */
void CDrawAnim::SetLoopFlg(bool bLoop)
{
	m_bLoop = bLoop;	//フラグをセット
}

/* ========================================
	アニメ再生フラグゲット関数
	-------------------------------------
	内容：ループ再生フラグをセット
	-------------------------------------
	引数：ループ再生判定フラグ（trueならループする）
	-------------------------------------
	戻値：なし
=========================================== */
bool CDrawAnim::GetAnimFlg()
{
	return m_bAnim;
}