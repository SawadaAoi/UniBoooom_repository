/* ========================================
	HEW/UniBoooom!!
	---------------------------------------
	ヒットスライムエフェクト管理用cpp
	---------------------------------------
	HitSlimeEffectManager.cpp

	作成者	鄭 宇恩

	変更履歴
	・2024/01/25 HitSlimeEffectManagerクラス作成 Tei

========================================== */

// =============== インクルード ===================
#include "HitSlimeEffectManager.h"

// =============== 定数定義 =======================
const float TOTAL_HIT_EFFECT_TIME = 15.0f;

/* ========================================
	関数：コンストラクタ
	-------------------------------------
	内容：実行時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CHitSlimeEffectManager::CHitSlimeEffectManager()
{

	// ヒットエフェクト配列の初期化
	for (int i = 0; i < MAX_HIT_NUM; i++)
	{
		m_phitEffect[i] = nullptr;
	}

	//エフェクト初期化
	m_hitEffect = LibEffekseer::Create("Assets/Effect/hit_effect/hit.efkefc");
}

/* ========================================
	関数：デストラクタ
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CHitSlimeEffectManager::~CHitSlimeEffectManager()
{
	// メモリ削除
	for (int i = 0; i < MAX_HIT_NUM; i++)
	{
		SAFE_DELETE(m_phitEffect[i]);
	}
}

/* ========================================
	関数：描画関数
	----------------------------------------
	内容：爆発マネージャーの描画処理
	----------------------------------------
	引数：なし
	----------------------------------------
	戻値：なし
======================================== */
void CHitSlimeEffectManager::Draw()
{
	// ヒットエフェクトの検索
	for (int i = 0; i < MAX_HIT_NUM; i++)
	{
		// 未使用のヒットエフェクトはスルー
		if (m_phitEffect[i] == nullptr) continue;

		m_phitEffect[i]->Draw(); // ヒットエフェクトの描画

		break;
	}
}

/* ========================================
	更新処理関数
	-------------------------------------
	内容：爆発マネージャーの更新処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CHitSlimeEffectManager::Update()
{
	// ヒットエフェクトを検索
	for (int i = 0; i < MAX_HIT_NUM; i++)
	{
		// 未使用のヒットエフェクトはスルー
		if (m_phitEffect[i] == nullptr) continue;
		m_phitEffect[i]->Update();
	}
	DeleteCheck();	// 削除チェック
}

/* ========================================
	ヒットエフェクト配列取得関数
	----------------------------------------
	内容：ヒットエフェクト配列の取得
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：ヒットエフェクトの配列
======================================== */
CHitEffect * CHitSlimeEffectManager::GetHitPtr(int num)
{
	if (!m_phitEffect[num]) { return nullptr; }
	return m_phitEffect[num];
}

/* ========================================
	生成処理関数
	-------------------------------------
	内容：ヒットエフェクトの生成
	-------------------------------------
	引数1：生成座標(x,y,z)
	-------------------------------------
	戻値：なし
=========================================== */
void CHitSlimeEffectManager::Create(TTriType<float> pos)
{
	// ヒットエフェクトを検索
	for (int i = 0; i < MAX_HIT_NUM; i++)
	{
		// 使用済みのヒットエフェクトはスルー
		if (m_phitEffect[i] != nullptr) continue;

		// 座標、エフェクト時間、Effekseerファイル、カメラを指定して生成
		m_phitEffect[i] = new CHitEffect(pos, TOTAL_HIT_EFFECT_TIME, m_hitEffect, m_pCamera);	
		//m_phitEffect[i]->SetCamera(m_pCamera);		//カメラセット
		break;	
	}
}

/* ========================================
	カメラ情報セット関数
	----------------------------------------
	内容：描画処理で使用するカメラ情報セット
	----------------------------------------
	引数1：なし
	----------------------------------------
	戻値：なし
======================================== */
void CHitSlimeEffectManager::SetCamera(const CCamera * pCamera)
{
	m_pCamera = pCamera;
}


/* ========================================
	ヒットエフェクト削除関数
	----------------------------------------
	内容：ヒットエフェクトが生成したらチェックしてから削除
	----------------------------------------
	引数：なし
	----------------------------------------
	戻値：なし
======================================== */
void CHitSlimeEffectManager::DeleteCheck()
{
	// ヒットエフェクトを検索
	for (int i = 0; i < MAX_HIT_NUM; i++)
	{
		// 未使用のヒットエフェクトはスルー
		if (m_phitEffect[i] == nullptr) continue;
		// 削除フラグがたってないヒットエフェクトはスルー
		if (m_phitEffect[i]->GetDelFlg() == false) continue;

		delete m_phitEffect[i]; m_phitEffect[i] = nullptr;	// ヒットエフェクトを削除する

	}
}
