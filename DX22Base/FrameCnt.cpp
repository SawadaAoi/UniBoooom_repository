/* ========================================
	HEW/UniBoooom!!
	------------------------------------
	フレームカウンタ実装
	------------------------------------
	FrameCnt.cpp
	------------------------------------
	作成者	takagi

	変更履歴
	・2023/12/16 作成 takagi
	・2023/12/17 デクリメント修正 takagi
	・2024/01/26 インクリメント修正 takagi

========================================== */

// =============== インクルード ===================
#include "FrameCnt.h"	//自身のヘッダ

// =============== 定数定義 =====================
const int MIN_CNT(0);	//最小フレーム数

/* ========================================
	コンストラクタ関数
	-------------------------------------
	内容：生成時に行う処理
	-------------------------------------
	引数1：const unsigned int& nEndFrame：目標フレーム数
	引数2：const bool& bCntDown：trueでカウントダウン, falseでカウントアップ
	-------------------------------------
	戻値：なし
=========================================== */
CFrameCnt::CFrameCnt(const unsigned int& nEndFrame, const bool& bCntDown)
	:m_nEndFrame(nEndFrame)
	,m_bCntDown(bCntDown)
{
	// =============== 初期化 =====================
	if (bCntDown)
	{	//カウントダウン
		m_nFrame = nEndFrame;	//カウントダウンできるように初期化
	}
	else
	{	//カウントアップ
		m_nFrame = MIN_CNT;	//カウントアップできるように初期化
	}
}

/* ========================================
	デストラクタ関数
	-------------------------------------
	内容：破棄時に行う処理
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
CFrameCnt::~CFrameCnt()
{
}

/* ========================================
	インクリメント演算子
	-------------------------------------
	内容：カウント+1
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：自身の参照
=========================================== */
CFrameCnt& CFrameCnt::operator++()
{	
	// =============== 検査 =====================
	if (true == m_bCntDown || m_nFrame < m_nEndFrame)	//カウントしてもリミットを超えない
	{
		// =============== カウンタ =====================
		m_nFrame++;	//カウント+1
	}

	// =============== 提供 =====================
	return *this;	//判定結果
}

/* ========================================
	デクリメント演算子
	-------------------------------------
	内容：カウント-1
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：自身の参照
=========================================== */
CFrameCnt& CFrameCnt::operator--()
{
	// =============== 検査 =====================
	if (false == m_bCntDown || MIN_CNT != m_nFrame)	//オーバーフローしない
	{
		// =============== カウンタ =====================
		m_nFrame--;	//カウント-1
	}

	// =============== 提供 =====================
	return *this;	//判定結果
}

/* ========================================
	カウント関数
	-------------------------------------
	内容：インクリメントかデクリメントを実行
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：なし
=========================================== */
void CFrameCnt::Count()
{
	// =============== カウンタ =====================
	if (m_bCntDown)
	{//カウントダウン
		--*this;	//デクリメント実行
	}
	else
	{//カウントアップ
		++*this;	//デクリメント実行
	}
}

/* ========================================
	カウント完了確認関数
	-------------------------------------
	内容：カウントが確認したか確認し、結果を提供する
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：カウント完了時true, 他false
=========================================== */
bool CFrameCnt::IsFin()
{
	// =============== 変数宣言 =====================
	bool bTemp = false;	//結果格納用

	// =============== 検査 =====================
	if (m_bCntDown)
	{//カウントダウン
		// =============== 検査 =====================
		if (m_nFrame <= MIN_CNT)		//超過
		{
			bTemp = true;	//カウント完了済
		}
	}
	else
	{//カウントアップ
		// =============== 検査 =====================
		if (m_nFrame >= m_nEndFrame)	//超過
		{
			bTemp = true;	//カウント完了済
		}
	}

	// =============== 提供 =====================
	return bTemp;	//判定結果
}

/* ========================================
	進行度ゲッタ
	-------------------------------------
	内容：カウントの進行割合を提供する
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：カウントの進行割合
=========================================== */
float CFrameCnt::GetRate()
{
	// =============== 提供 =====================
	if (0 == m_nEndFrame)	//0除算回避
	{
		return 0;	//代替値
	}
	else
	{
		return (static_cast<float>(m_nFrame) / static_cast<float>(m_nEndFrame));	//カウンタ進行率
	}
}

/* ========================================
	カウント数ゲッタ
	-------------------------------------
	内容：現在数えているフレーム数を取得する
	-------------------------------------
	引数1：なし
	-------------------------------------
	戻値：現在のカウント数
=========================================== */
int CFrameCnt::GetCnt()
{
	// =============== 提供 =====================
	return m_nFrame;	//カウント数
}